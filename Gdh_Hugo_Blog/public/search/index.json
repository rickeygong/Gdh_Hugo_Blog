[{"content":"今天突然想起自己用过哪些手机，简单地写下。\n2008 Nokia 6120CI\n2013 中兴 V880\n2013 华为 T8830\n2015 iPhone 5S\n2017 小米 MAX2\n2018 小米 8SE\n2020 红米 K30Pro\n2021 iPhone 12\n2024 iPhone 15Pro\n","date":"2024-11-11T13:05:12+08:00","image":"http://localhost:1313/post/images/Casual-notes-logo.png","permalink":"http://localhost:1313/p/casual-notes-mobile-memoir/","title":"Mobile Memoir"},{"content":"简述\rNPM，全称为 Node Package Manager，是一个用于管理和共享 JavaScript 代码包的工具。它是 Node.js 平台的默认包管理器，允许开发者从 NPM 仓库中下载并安装各种 JavaScript 包和工具。通过 NPM，开发者可以轻松地查找、安装、更新和删除依赖包，使得 JavaScript 项目的开发和维护更加高效和便捷。\nNPM 除了用于安装和管理包之外，还提供了一些其他功能，比如发布自己的包到 NPM 仓库、管理项目的依赖关系、运行脚本命令等。开发者可以通过 NPM 来构建和管理他们的 JavaScript 项目，以及与其他开发者分享他们的代码作品。\n总的来说，NPM 是一个强大的工具，为 JavaScript 社区提供了便利的包管理功能，促进了开发者之间的协作和知识共享。\n实例1\r简单地做过实例体验。\n这个实例功能很简单，就是使用NPM命令后，生成我们事先预设的几个文件夹。\n编码\r确保环境安装了 Node.js\rP.S: NPM内置在Node.js里面的。\n创建并进入文件夹\r1 2 3 mkdir FolderCreator cd FolderCreator 初始化npm项目\r1 npm init -y npm init -y 是一个用于快速生成项目的 package.json 文件的命令。\n在这个命令中，npm init 是用于初始化一个新的 Node.js 项目的命令，而 -y 参数表示在执行初始化时使用默认值，而不需要用户输入任何信息。\n具体来说，执行 npm init -y 会自动创建一个默认的 package.json 文件，其中包含一些基本的信息，如项目名称、版本号、作者等。这样可以快速创建一个简单的项目结构，而无需逐个回答 npm init 提出的各种问题。\n使用 npm init -y 命令可以节省时间，特别是在创建临时项目或试验性项目时。然后开发者可以根据需要再进行手动调整和配置\n创建并编辑脚本文件\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/usr/bin/env node const fs = require(\u0026#39;fs\u0026#39;); const path = require(\u0026#39;path\u0026#39;); const folders = [ \u0026#39;10 项目管理/10-01 要件定义\u0026#39;, \u0026#39;10 项目管理/10-02 要件定义交付\u0026#39;, \u0026#39;10 项目管理/10-03 项目主计划\u0026#39;, \u0026#39;10 项目管理/10-04 项目周报\u0026#39;, \u0026#39;10 项目管理/10-05 会议纪要\u0026#39;, \u0026#39;20 业务调研及要件定义/20-01 调研计划\u0026#39;, \u0026#39;20 业务调研及要件定义/20-02 调研会议资料\u0026#39;, \u0026#39;20 业务调研及要件定义/20-03 调研会议会议纪要\u0026#39;, \u0026#39;20 业务调研及要件定义/20-04 业务需求分析\u0026#39;, \u0026#39;20 业务调研及要件定义/20-05 业务蓝图\u0026#39;, \u0026#39;20 业务调研及要件定义/20-06 课题研讨\u0026#39;, \u0026#39;20 业务调研及要件定义/20-07 功能设计/历史版本\u0026#39;, \u0026#39;30 技术概要及详细设计\u0026#39;, \u0026#39;40 系统测试和培训/40-01 系统测试\u0026#39;, \u0026#39;40 系统测试和培训/40-02 用户培训\u0026#39;, \u0026#39;50 系统上线/50-01 系统切换方案\u0026#39;, \u0026#39;50 系统上线/50-02 用户及权限配置\u0026#39;, \u0026#39;50 系统上线/50-03 数据初始化\u0026#39;, \u0026#39;50 系统上线/50-04 系统上线汇报材料\u0026#39;, \u0026#39;60 上线后运维\u0026#39;, \u0026#39;70 配置相关\u0026#39;, \u0026#39;80 数据清理/80-01 数据清理方案\u0026#39;, \u0026#39;80 数据清理/80-02 数据清理模板\u0026#39;, \u0026#39;80 数据清理/80-03 数据清理结果\u0026#39; ]; const rootPath = process.cwd(); folders.forEach(folder =\u0026gt; { const fullPath = path.join(rootPath, folder); fs.mkdirSync(fullPath, { recursive: true }); }); 更新package.json\r在 package.json 文件中，添加一个 bin 字段，以便将该脚本作为命令行工具使用\n1 2 3 \u0026#34;bin\u0026#34;: { \u0026#34;create-folders\u0026#34;: \u0026#34;./createFolders.js\u0026#34; } 添加 #!/usr/bin/env node\r在 createFolders.js 文件顶部添加 #!/usr/bin/env node\n这行代码是一个称为 shebang 的特殊注释，通常出现在 Unix-like 系统的脚本文件的第一行。\n它告诉操作系统应该使用哪个解释器来执行这个脚本文件。\n在这个例子中，#!/usr/bin/env node 意味着使用环境中的 Node.js 解释器来执行这个脚本。\n本地发布 npm link\r使用 npm link 命令包发布到全局(本地)，方便从命令行直接调用\n1 npm link 运行脚本(本地)\r随便在桌面新建个文件夹，然后命令行输入，运行后将生成我们预设的文件夹。\n1 create-folders 发布NPM\r将上述写的包发布NPM，下面是具体步骤。\n创建NPM账号\r官方：https://www.npmjs.com\n登录NPM\r在终端输入 npm login\n调整package.json\rname 包的名称，需要保证唯一 version description main 入口文件 bin 执行命令工具路径 下面是我的 package.json代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 { \u0026#34;name\u0026#34;: \u0026#34;gdhblog_folder_creator\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;keywords\u0026#34;: [], \u0026#34;author\u0026#34;: \u0026#34;Donghai Gong\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;A simple tool to create a predefined folder structure in the current directory.\u0026#34;, \u0026#34;bin\u0026#34;: { \u0026#34;create-folders\u0026#34;: \u0026#34;./createFolders.js\u0026#34; } } 调整好package.json信息后，终端输入 npm pack 生成 .tgz 文件\n发布\r输入代码：\n1 npm publish 备注\r发布包时，选择公开还是私有化\n公开：（默认）npm publish 私有：在package.json添加 \u0026quot;private\u0026quot; : ture 验证/测试\r等几分钟后，在NPM就能看到，接下来我将演示如何使用它。\n新建并进入文件夹\r1 2 3 mkdir Test_FolderCreator cd Test_FolderCreator 安装\r1 npm i gdhblog_foldercreator npm: 是 Node.js 平台的包管理工具，用于下载、安装和管理 JavaScript 包。 i（缩写形式）或 install（完整形式）: 是 npm 安装包的命令。 gdhblog_foldercreator: 是要安装的 npm 包的名称。 执行命令\r也就是刚才我们在package.json文件中配置的 bin\n","date":"2024-11-11T13:05:12+08:00","image":"http://localhost:1313/post/images/npm-logo.png","permalink":"http://localhost:1313/p/js-npm-introduction/","title":"NPM初体验"},{"content":"简述\r本文介绍如何在Dynamics CRM使用FetchXML进行自定义的报表开发，包括：\n准备环境\n实例演练\n准备环境\rP.S 下列的软件，请按照顺序进行操作，否则会出现意想不到的问题\nVisual studio 2019\nSQL Server Data Tools\nMicrosoft Reporting Services Projects\n重启电脑\n安装Dynamics 365 Report Authoring Extension\n下面是下载地址：\nMicrosoft Reporting Services Projects Dynamics 365 Report Authoring Extension 2024-01-22 我曾尝试使用Visual studio 2022进行报表开发，但提示组件异常，未能解决。\n所以还是建议继续使用Visual studio 2019。\n开发实例\r实例1 ：用户最后一次登录时间\r创建项目\r首先，我们先打开Visual studio 2019，创建报表项目\n新建项目\n搜索\u0026quot;报表\u0026quot;，选择 \u0026ldquo;报表服务器项目\u0026rdquo;，点击 \u0026ldquo;下一步\u0026rdquo;\n填写 \u0026ldquo;项目名称\u0026rdquo; ，点击 \u0026ldquo;创建\u0026rdquo; 至此，我们已经完成了报表项目的创建，结构如下：\n创建报表\r选中 \u0026ldquo;报表\u0026rdquo; 文件夹 ， 右击它\n选中 \u0026ldquo;添加\u0026rdquo; ， 再选择 \u0026ldquo;新建项\u0026rdquo;\n选择报表 ，输入报表名称，点击添加\n至此，报表添加完成，界面如下：\n添加数据源\r选中 \u0026ldquo;数据源\u0026rdquo; 文件夹 ， 右击它 ， 选中 \u0026ldquo;添加数据源\u0026rdquo; 如果“报表数据”选项卡被你不小心关掉了，可以通过快捷键 Ctrl + Alt + D 打开\n填写 \u0026ldquo;添加数据源名称\u0026rdquo; 关于数据源名称，可以根据个人习惯进行命名；我习惯写 \u0026ldquo;DynamicsCRMDataSouce\u0026rdquo;\n这个名称无所谓，你用默认的也可以，后面都可以修改的\n类型 选择 Microsoft Dynamics 365 Fetch\n输入 \u0026ldquo;连接字符串\u0026rdquo; ，点击 \u0026ldquo;确定\u0026rdquo;\n连接字符串怎么获取，请参考本文 获取连接字符串 部分\n准备FetchXML\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;fetch aggregate=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;entity name=\u0026#34;audit\u0026#34;\u0026gt; \u0026lt;attribute name=\u0026#34;createdon\u0026#34; alias=\u0026#34;LastLoginDate\u0026#34; aggregate=\u0026#34;max\u0026#34; /\u0026gt; \u0026lt;filter\u0026gt; \u0026lt;condition attribute=\u0026#34;operation\u0026#34; operator=\u0026#34;eq\u0026#34; value=\u0026#34;4\u0026#34; /\u0026gt; \u0026lt;/filter\u0026gt; \u0026lt;link-entity name=\u0026#34;systemuser\u0026#34; from=\u0026#34;systemuserid\u0026#34; to=\u0026#34;objectid\u0026#34; link-type=\u0026#34;inner\u0026#34; alias=\u0026#34;SystemUser\u0026#34;\u0026gt; \u0026lt;attribute name=\u0026#34;fullname\u0026#34; alias=\u0026#34;FullName\u0026#34; groupby=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;attribute name=\u0026#34;domainname\u0026#34; alias=\u0026#34;DomainName\u0026#34; groupby=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;attribute name=\u0026#34;isdisabled\u0026#34; alias=\u0026#34;IsDisabled\u0026#34; groupby=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;attribute name=\u0026#34;accessmode\u0026#34; alias=\u0026#34;AccessMode\u0026#34; groupby=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;attribute name=\u0026#34;userlicensetype\u0026#34; alias=\u0026#34;UserLicenseType\u0026#34; groupby=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;/link-entity\u0026gt; \u0026lt;/entity\u0026gt; \u0026lt;/fetch\u0026gt; 添加数据集\r填写 \u0026ldquo;数据集名称\u0026rdquo;，选择 \u0026ldquo;使用在我的报表中嵌入的数据集\u0026rdquo; ，选择刚刚我们添加的DynamicsCRMDataSouce数据源\n查询类型选择“文本”，填写Fetch，最后点击“确定”\n注：点击“确定”后如果弹出登录框，登录自己的开发账号即可\n报表设计\r标题 选择工具箱中的“文本框”，拖到报表设计界面，然后填写标题\n选择工具箱中的“表”，拖到报表设计界面，在输入列标题，样式可以根据自己需求进行调整\n数据绑定\r用“用户名称”列举例：右击用户名下边的空格，选择“表达式”\n选择“字段”，然后双击“FullName”，双击后表达式会自动更新。\n当然，表达式你也可以自己手写进去，最后点击 \u0026ldquo;确定\u0026rdquo;\n然后依次为其他列绑定数据\n测试(预览)报表\r效果：\n发布报表\r进入Power Apps ，新建解决方案（使用现有的也可以，注意是非托管的就行）。\n点击 \u0026ldquo;新建\u0026rdquo; ，选择 \u0026ldquo;报表\u0026rdquo;\n报表类型选择 “现有文件” ，然后选择开发完成的报表：用户最后一次登录时间.rdl，\n填写 “报表名称” ，最后点击“保存”\n至此，实例已经完成。你可以到菜单栏的报表中打开并预览它。\n在Dynamics CRM中，一般需要自定义开发的报表有两类：（我自己的归类）\n\u0026ldquo;全局类报表\u0026rdquo; : 本次实例做的就是这类报表，这类报表的执行位置通常放在报表实体、某业务实体的视图按钮栏上\n\u0026ldquo;单记录类报表\u0026rdquo; : 这类报表通常放在业务记录的表单上，参数主要取某条业务记录的Guid\n获取连接字符串\r连接字符串的格式 ： {环境URL}/{环境唯一名称}\n例如：\n环境URL：https://sample.crm.dynamics.cn\n环境唯一名称：123456789\n连接字符串：https://sample.crm.dynamics.cn/123456789\n如何获取环境唯一名称？\nUCI界面\n打开Power Apps https://make.powerapps.com/\n点击右上角的设置按钮，选择 \u0026ldquo;开发人员资源\u0026rdquo;\n经典UI\n设置 \u0026ndash;\u0026gt; 自定义项\n选择 \u0026ldquo;开发人员资源\u0026rdquo;\n","date":"2024-10-17T20:00:00+08:00","image":"http://localhost:1313/post/images/dynamics-crm-logo.png","permalink":"http://localhost:1313/p/dynamics-crm-developing-ssrs-reports-using-fetchxml/","title":"Dynamics CRM - 使用FetchXML开发SSRS报表"},{"content":"前言\rPlugin Registration ，用于注册和管理插件，不想单独安装 Plugin Registration 的话，可以直接在 XrmToolBox 安装使用。\n安装方式 1\r访问Nuget\rNuGet Gallery | Microsoft.CrmSdk.XrmTooling.PluginRegistrationTool 9.1.0.199\nDownload package\r修改压缩包后缀名\r将下载的文件后缀名更改为.zip，然后解压缩，Plugin Registration 就在tool文件夹里\n安装方式 2\r创建文件夹\r例：D:\\Dynamics_365_Development_Tools\\pluginsTool\nPowershell\rPowerShell 进入 D:\\Dynamics_365_Development_Tools\\pluginsTool\n运行代码\r先运行代码：\n1 2 3 4 5 6 [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 $sourceNugetExe = \u0026#34;https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\u0026#34; $targetNugetExe = \u0026#34;.\\nuget.exe\u0026#34; Remove-Item .\\Tools -Force -Recurse -ErrorAction Ignore Invoke-WebRequest $sourceNugetExe -OutFile $targetNugetExe Set-Alias nuget $targetNugetExe -Scope Global -Verbose 再运行代码：\n1 2 3 4 5 6 7 8 ## ##Download Plugin Registration Tool ## ./nuget install Microsoft.CrmSdk.XrmTooling.PluginRegistrationTool -O .\\Tools md .\\Tools\\PluginRegistration $prtFolder = Get-ChildItem ./Tools | Where-Object {$_.Name -match \u0026#39;Microsoft.CrmSdk.XrmTooling.PluginRegistrationTool.\u0026#39;} move .\\Tools\\$prtFolder\\tools\\*.* .\\Tools\\PluginRegistration Remove-Item .\\Tools\\$prtFolder -Force -Recurse 安装完成\rPowerShell 代码\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 $sourceNugetExe = \u0026#34;https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\u0026#34; $targetNugetExe = \u0026#34;.\\nuget.exe\u0026#34; Remove-Item .\\Tools -Force -Recurse -ErrorAction Ignore Invoke-WebRequest $sourceNugetExe -OutFile $targetNugetExe Set-Alias nuget $targetNugetExe -Scope Global -Verbose ## ##Download Plugin Registration Tool ## ./nuget install Microsoft.CrmSdk.XrmTooling.PluginRegistrationTool -O .\\Tools md .\\Tools\\PluginRegistration $prtFolder = Get-ChildItem ./Tools | Where-Object {$_.Name -match \u0026#39;Microsoft.CrmSdk.XrmTooling.PluginRegistrationTool.\u0026#39;} move .\\Tools\\$prtFolder\\tools\\*.* .\\Tools\\PluginRegistration Remove-Item .\\Tools\\$prtFolder -Force -Recurse ## ##Download CoreTools ## ./nuget install Microsoft.CrmSdk.CoreTools -O .\\Tools md .\\Tools\\CoreTools $coreToolsFolder = Get-ChildItem ./Tools | Where-Object {$_.Name -match \u0026#39;Microsoft.CrmSdk.CoreTools.\u0026#39;} move .\\Tools\\$coreToolsFolder\\content\\bin\\coretools\\*.* .\\Tools\\CoreTools Remove-Item .\\Tools\\$coreToolsFolder -Force -Recurse ## ##Download Configuration Migration ## ./nuget install Microsoft.CrmSdk.XrmTooling.ConfigurationMigration.Wpf -O .\\Tools md .\\Tools\\ConfigurationMigration $configMigFolder = Get-ChildItem ./Tools | Where-Object {$_.Name -match \u0026#39;Microsoft.CrmSdk.XrmTooling.ConfigurationMigration.Wpf.\u0026#39;} move .\\Tools\\$configMigFolder\\tools\\*.* .\\Tools\\ConfigurationMigration Remove-Item .\\Tools\\$configMigFolder -Force -Recurse ## ##Download Package Deployer ## ./nuget install Microsoft.CrmSdk.XrmTooling.PackageDeployment.WPF -O .\\Tools md .\\Tools\\PackageDeployment $pdFolder = Get-ChildItem ./Tools | Where-Object {$_.Name -match \u0026#39;Microsoft.CrmSdk.XrmTooling.PackageDeployment.Wpf.\u0026#39;} move .\\Tools\\$pdFolder\\tools\\*.* .\\Tools\\PackageDeployment Remove-Item .\\Tools\\$pdFolder -Force -Recurse ## ##Remove NuGet.exe ## Remove-Item nuget.exe ","date":"2024-10-16T22:55:51+08:00","image":"http://localhost:1313/post/images/dynamics-crm-logo.png","permalink":"http://localhost:1313/p/dynamics-crm-install-plugin-registration/","title":"Dynamics CRM - 安装 Plugin Registration 工具"},{"content":"我目前主要使用的有如下3种方法：\n通过Power Platform管理中心获取\n通过FetchXML查询\nSQL\n通过Power Platform管理中心获取\r通过Power Platform管理中心的 “分析”\n过FetchXML查询\rFetchXML如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;fetch aggregate=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;entity name=\u0026#34;audit\u0026#34;\u0026gt; \u0026lt;attribute name=\u0026#34;createdon\u0026#34; alias=\u0026#34;LastLoginDate\u0026#34; aggregate=\u0026#34;max\u0026#34; /\u0026gt; \u0026lt;filter\u0026gt; \u0026lt;condition attribute=\u0026#34;operation\u0026#34; operator=\u0026#34;eq\u0026#34; value=\u0026#34;4\u0026#34; /\u0026gt; \u0026lt;/filter\u0026gt; \u0026lt;link-entity name=\u0026#34;systemuser\u0026#34; from=\u0026#34;systemuserid\u0026#34; to=\u0026#34;objectid\u0026#34; link-type=\u0026#34;inner\u0026#34; alias=\u0026#34;SystemUser\u0026#34;\u0026gt; \u0026lt;attribute name=\u0026#34;fullname\u0026#34; alias=\u0026#34;FullName\u0026#34; groupby=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;attribute name=\u0026#34;domainname\u0026#34; alias=\u0026#34;DomainName\u0026#34; groupby=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;attribute name=\u0026#34;isdisabled\u0026#34; alias=\u0026#34;IsDisabled\u0026#34; groupby=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;attribute name=\u0026#34;accessmode\u0026#34; alias=\u0026#34;AccessMode\u0026#34; groupby=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;attribute name=\u0026#34;userlicensetype\u0026#34; alias=\u0026#34;UserLicenseType\u0026#34; groupby=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;/link-entity\u0026gt; \u0026lt;/entity\u0026gt; \u0026lt;/fetch\u0026gt; 示：\nSQL\r在XrmToolBox里使用“SQL 4 CDS”进行查询，SQL如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 SELECT MAX(audit.createdon) AS LastLoginDate, SystemUser.fullname AS FullName, SystemUser.domainname AS DomainName, SystemUser.isdisabled AS IsDisabled, SystemUser.accessmode AS AccessMode, SystemUser.userlicensetype AS UserLicenseType FROM audit INNER JOIN systemuser AS SystemUser ON audit.objectid = SystemUser.systemuserid WHERE audit.operation = 4 GROUP BY SystemUser.fullname, SystemUser.domainname, SystemUser.isdisabled, SystemUser.accessmode, SystemUser.userlicensetype; 备注\r审核\r如果使用方式2或方式3，需开启“审核功能”\nOperation Choices/Options\rValue Text 1 Create 2 Update 3 Delete 4 Access 5 Upsert 115 Archive 116 Retain 117 RollbackRetain 118 Restore 200 CustomOperation ","date":"2024-10-15T14:55:51+08:00","image":"http://localhost:1313/post/images/dynamics-crm-logo.png","permalink":"http://localhost:1313/p/dynamics-crm-get-user-last-login-time/","title":"Dynamics CRM - 获取用户最后一次登录时间"},{"content":"检测访问速度\r假设你的环境链接是：[https://sample.dynamics.cn/main.aspx]\n在链接后面追加 /tools/diagnostics/diag.aspx，然后访问\n1 2 3 # Url sample https://sample.dynamics.cn/tools/diagnostics/diag.aspx 访问后才会出现 \u0026ldquo;Dynamics 365 Diagnostics\u0026rdquo; (Dynamics 365 诊断)，\n点击 \u0026ldquo;Run\u0026rdquo; ，稍等片刻就会出现诊断结果。\n","date":"2024-10-15T12:55:51+08:00","image":"http://localhost:1313/post/images/dynamics-crm-logo.png","permalink":"http://localhost:1313/p/dynamics-crm-check-access-speed/","title":"Dynamics CRM - 检查访问速度"}]